# Default values for linkurious-enterprise.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

image:
  repository:
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

## Optionally specify an array of imagePullSecrets.
## Secrets must be manually created in the namespace.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 2013

securityContext:
  capabilities:
    drop:
    - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 2013
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault

## Readiness and liveness probes for default backend
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

## Environment variables to pass to server
##
env: []
  # - name: "LKE_AUTH_REQUIRED"
  #   value: "true"

## envFrom to pass to server
##
envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

# Existing secret to use for license
# licenseFromSecret: '{{ printf "%s-lke-license-secret" .Release.Name }}'

service:
  type: ClusterIP
  port: 80
  metricsPort: 9400

## hostPostfix is used to generate hosts and urls using the target namespace.
hostPostfix: example.domain
hostPrefixOverride: linkurious-enterprise
ingress:
  enabled: false
  className: ""
  labels: {}
    # kube-prometheus-stack-probe: enabled
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - paths:
        - path: /
          pathType: ImplementationSpecific
   # - host: chart-example.local
   #   paths:
   #     - path: /
   #       pathType: ImplementationSpecific
  tls:
    - secretName: wildcard-default-cert
    # - secretName: wildcard-default-cert
    #  hosts:
    #    - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 1000m
  #   memory: 600Mi
  # requests:
  #   cpu: 500m
  #   memory: 300Mi

## Create HorizontalPodAutoscaler object for deployment type
# This is not recommended
# https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
## Use init containers to configure custom tooling
## https://argoproj.github.io/argo-cd/operator-manual/custom_tools/
## When using the volumes & volumeMounts section bellow, please comment out those above.
#  volumes:
#  - name: custom-tools
#    emptyDir: {}
#
#  initContainers:
#  - name: download-tools
#    image: alpine:3.8
#    command: [sh, -c]
#    args:
#      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
#        mv linux-amd64/helm /custom-tools/
#    volumeMounts:
#      - mountPath: /custom-tools
#        name: custom-tools
#  volumeMounts:
#  - mountPath: /usr/local/bin/helm
#    name: custom-tools
#    subPath: helm

# -- Manage LKE configmap (Declarative Setup)
## Ref: https://doc.linkurio.us/admin-manual/latest/configure/#variable-expansion
configEnabled: false
configOverlayEnabled: true
config:
  version: 2.10.18
  db:
    options:
      dialect: 'sqlite'
      storage: 'server/database.sqlite'
  access:
    authRequired: "$ENV:LKE_AUTH_REQUIRED"
    oauth2:
      enabled: "$ENV-JSON:LKE_OAUTH2_ENABLED"
      provider: "$ENV:LKE_OAUTH2_PROVIDER"
      authorizationURL: "$ENV:LKE_OAUTH2_AUTHORIZATION_URL"
      tokenURL: "$ENV:LKE_OAUTH2_TOKEN_URL"
      clientID: "$ENV:LKE_OAUTH2_CLIENT_ID"
      clientSecret: "$ENV:LKE_OAUTH2_CLIENT_SECRET"
      azure:
        tenantID: "$ENV:LKE_OAUTH2_AZURE_TENANT_ID"
    autoRefreshGroupMapping: "$ENV-JSON:LKE_OAUTH2_AUTO_REFRESH_GROUP_MAPPING"
  server:
    cookieHttpOnly: true
    allowOrigin: "$ENV:LKE_ALLOW_ORIGIN"
    allowFraming: false
    domain: "$ENV:LKE_PUBLIC_DOMAIN"
    publicPortHttps: "$ENV-NUMBER:LKE_PUBLIC_PORT_HTTPS"
    useHttps: false
    forceHttps: false
    forcePublicHttps: "$ENV-JSON:LKE_FORCE_PUBLIC_HTTPS"
  # LKE externally facing base URL (optional). Required when configuring SSO
  # url: https://lke.example.com
  # access:
  #   authRequired: true
  #   oauth2:
  #     enabled: true

# set offlineMaintenanceModeEnabled: true to restart the StatefulSet without the linkurious-enterprise process running
# this can be used to perform tasks that cannot be performed when Neo4j is running,
# or in case the configuration is broken
offlineMaintenanceModeEnabled: false

persistentVolume:
  enabled: false
  ## redis-ha data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessModes:
    - ReadWriteOnce
  size: 5Gi
  annotations: {}

backup:

  litestream:
    ## will backup sqlite with litestream
    enabled: false
    readinessProbe:
      exec:
        command:
          - litestream
          - snapshots
          - /data/server/database.sqlite
      initialDelaySeconds: 5
      periodSeconds: 15
      failureThreshold: 3
      timeoutSeconds: 5
    livenessProbe:
      exec:
        command:
          - litestream
          - snapshots
          - /data/server/database.sqlite
      initialDelaySeconds: 5
      periodSeconds: 15
      failureThreshold: 3
      timeoutSeconds: 5
    resources: {}
      # limits:
      #   cpu: 1500m
      #   memory: 1000Mi
      # requests:
      #   cpu: 100m
      #   memory: 100Mi
    secretRef:
      name: "litestream-lke-secret"
    config: |
      ---
      # https://litestream.io/reference/config/
      dbs:
        - path: /data/server/database.sqlite
          replicas:
            - url: s3://BUCKETNAME/PATHNAME
              retention: 720h
              snapshot-interval: 24h

  velero:
    ## will backup lke-data mount volume with velero
    enabled: false

hostAliases: []

metrics:
## Prometheus is enabled by default.
## It can be disabled by setting "prometheus: null"
  prometheus:
    enabled: true
    ## Entry point used to expose metrics.
    entryPoint: metrics
    disableAPICheck: true
    serviceMonitor:
      additionalLabels:
        release: kube-prometheus-stack
      jobLabel: linkurious-enterprise
      interval: 30s
      honorLabels: true

## Allow only whitelisted ip or cidr
## https://doc.traefik.io/traefik/middlewares/http/ipwhitelist/
ipWhiteList: {}
# sourceRange:
#   - 127.0.0.1/32
#   - 192.168.1.7
